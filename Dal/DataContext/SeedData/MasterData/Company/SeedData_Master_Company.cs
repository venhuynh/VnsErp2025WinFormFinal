using System;
using System.Collections.Generic;
using System.Linq;
using Dal.DataContext;

namespace Dal.DataContext.SeedData.MasterData.Company
{
    /// <summary>
    /// Class qu·∫£n l√Ω seed data cho Company entities
    /// Bao g·ªìm: Company, CompanyBranch, Department, Position, Employee
    /// </summary>
    public static class SeedData_Master_Company
    {
        #region ========== PUBLIC METHODS ==========

        /// <summary>
        /// T·∫°o t·∫•t c·∫£ seed data cho Company entities
        /// </summary>
        public static void CreateAllCompanyData()
        {
            using (var context = CreateContext())
            {
                CreateAllCompanyData(context);
            }
        }

        /// <summary>
        /// T·∫°o t·∫•t c·∫£ seed data cho Company entities v·ªõi connection string
        /// </summary>
        /// <param name="connectionString">Connection string ƒë·ªÉ k·∫øt n·ªëi database</param>
        public static void CreateAllCompanyData(string connectionString)
        {
            using (var context = new VnsErp2025DataContext(connectionString))
            {
                CreateAllCompanyData(context);
            }
        }

        /// <summary>
        /// T·∫°o t·∫•t c·∫£ seed data cho Company entities v·ªõi context
        /// </summary>
        /// <param name="context">DataContext ƒë·ªÉ t·∫°o d·ªØ li·ªáu</param>
        public static void CreateAllCompanyData(VnsErp2025DataContext context)
        {
            try
            {
                Console.WriteLine("üè¢ B·∫Øt ƒë·∫ßu t·∫°o seed data cho Company entities...");

                // 1. T·∫°o Companies
                CreateCompanies(context);

                // 2. T·∫°o CompanyBranches
                CreateCompanyBranches(context);

                // 3. T·∫°o Positions
                CreatePositions(context);

                // 4. T·∫°o Departments
                CreateDepartments(context);

                // 5. T·∫°o Employees
                CreateEmployees(context);

                Console.WriteLine("üéâ Ho√†n th√†nh t·∫°o seed data cho Company entities!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói khi t·∫°o seed data: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// X√≥a t·∫•t c·∫£ seed data cho Company entities
        /// </summary>
        public static void DeleteAllCompanyData()
        {
            using (var context = CreateContext())
            {
                DeleteAllCompanyData(context);
            }
        }

        /// <summary>
        /// X√≥a t·∫•t c·∫£ seed data cho Company entities v·ªõi connection string
        /// </summary>
        /// <param name="connectionString">Connection string ƒë·ªÉ k·∫øt n·ªëi database</param>
        public static void DeleteAllCompanyData(string connectionString)
        {
            using (var context = new VnsErp2025DataContext(connectionString))
            {
                DeleteAllCompanyData(context);
            }
        }

        /// <summary>
        /// X√≥a t·∫•t c·∫£ seed data cho Company entities v·ªõi context
        /// </summary>
        /// <param name="context">DataContext ƒë·ªÉ x√≥a d·ªØ li·ªáu</param>
        public static void DeleteAllCompanyData(VnsErp2025DataContext context)
        {
            try
            {
                Console.WriteLine("üóëÔ∏è B·∫Øt ƒë·∫ßu x√≥a seed data cho Company entities...");

                // X√≥a theo th·ª© t·ª± ng∆∞·ª£c l·∫°i ƒë·ªÉ tr√°nh foreign key constraint
                
                // 1. X√≥a Employees
                var employeeCount = context.Employees.Count();
                if (employeeCount > 0)
                {
                    context.Employees.DeleteAllOnSubmit(context.Employees);
                    context.SubmitChanges();
                    Console.WriteLine($"‚úÖ ƒê√£ x√≥a {employeeCount} Employees");
                }

                // 2. X√≥a Departments
                var departmentCount = context.Departments.Count();
                if (departmentCount > 0)
                {
                    context.Departments.DeleteAllOnSubmit(context.Departments);
                    context.SubmitChanges();
                    Console.WriteLine($"‚úÖ ƒê√£ x√≥a {departmentCount} Departments");
                }

                // 3. X√≥a Positions
                var positionCount = context.Positions.Count();
                if (positionCount > 0)
                {
                    context.Positions.DeleteAllOnSubmit(context.Positions);
                    context.SubmitChanges();
                    Console.WriteLine($"‚úÖ ƒê√£ x√≥a {positionCount} Positions");
                }

                // 4. X√≥a CompanyBranches
                var branchCount = context.CompanyBranches.Count();
                if (branchCount > 0)
                {
                    context.CompanyBranches.DeleteAllOnSubmit(context.CompanyBranches);
                    context.SubmitChanges();
                    Console.WriteLine($"‚úÖ ƒê√£ x√≥a {branchCount} CompanyBranches");
                }

                // 5. X√≥a Companies
                var companyCount = context.Companies.Count();
                if (companyCount > 0)
                {
                    context.Companies.DeleteAllOnSubmit(context.Companies);
                    context.SubmitChanges();
                    Console.WriteLine($"‚úÖ ƒê√£ x√≥a {companyCount} Companies");
                }

                Console.WriteLine("üéâ Ho√†n th√†nh x√≥a seed data cho Company entities!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói khi x√≥a seed data: {ex.Message}");
                throw;
            }
        }

        #endregion

        #region ========== PRIVATE METHODS ==========

        /// <summary>
        /// T·∫°o Companies
        /// </summary>
        private static void CreateCompanies(VnsErp2025DataContext context)
        {
            var companies = new List<DataContext.Company>
            {
                new DataContext.Company
                {
                    Id = Guid.Parse("11111111-1111-1111-1111-111111111111"),
                    CompanyCode = "VNS001",
                    CompanyName = "C√¥ng ty TNHH VNS Technology",
                    TaxCode = "0123456789",
                    Phone = "028-1234-5678",
                    Email = "info@vnstech.com",
                    Website = "www.vnstech.com",
                    Address = "123 Nguy·ªÖn Hu·ªá, Qu·∫≠n 1, TP.HCM",
                    Country = "Vi·ªát Nam",
                    CreatedDate = DateTime.Now.AddDays(-365),
                    UpdatedDate = DateTime.Now.AddDays(-30)
                },
                new DataContext.Company
                {
                    Id = Guid.Parse("22222222-2222-2222-2222-222222222222"),
                    CompanyCode = "VNS002",
                    CompanyName = "C√¥ng ty TNHH VNS Solutions",
                    TaxCode = "0987654321",
                    Phone = "028-8765-4321",
                    Email = "contact@vnssolutions.com",
                    Website = "www.vnssolutions.com",
                    Address = "456 L√™ L·ª£i, Qu·∫≠n 3, TP.HCM",
                    Country = "Vi·ªát Nam",
                    CreatedDate = DateTime.Now.AddDays(-300),
                    UpdatedDate = DateTime.Now.AddDays(-15)
                }
            };

            context.Companies.InsertAllOnSubmit(companies);
            context.SubmitChanges();
            Console.WriteLine($"‚úÖ ƒê√£ t·∫°o {companies.Count} Companies");
        }

        /// <summary>
        /// T·∫°o CompanyBranches
        /// </summary>
        private static void CreateCompanyBranches(VnsErp2025DataContext context)
        {
            var companyId1 = Guid.Parse("11111111-1111-1111-1111-111111111111");
            var companyId2 = Guid.Parse("22222222-2222-2222-2222-222222222222");

            var branches = new List<CompanyBranch>
            {
                // Chi nh√°nh c·ªßa VNS Technology
                new CompanyBranch
                {
                    Id = Guid.Parse("33333333-3333-3333-3333-333333333333"),
                    CompanyId = companyId1,
                    BranchCode = "VNS001-HN",
                    BranchName = "Chi nh√°nh H√† N·ªôi",
                    Address = "789 Tr√†ng Ti·ªÅn, Ho√†n Ki·∫øm, H√† N·ªôi",
                    Phone = "024-1234-5678",
                    Email = "hanoi@vnstech.com",
                    ManagerName = "Nguy·ªÖn VƒÉn A",
                    IsActive = true,
                },
                new CompanyBranch
                {
                    Id = Guid.Parse("44444444-4444-4444-4444-444444444444"),
                    CompanyId = companyId1,
                    BranchCode = "VNS001-DN",
                    BranchName = "Chi nh√°nh ƒê√† N·∫µng",
                    Address = "321 L√™ Du·∫©n, H·∫£i Ch√¢u, ƒê√† N·∫µng",
                    Phone = "0236-1234-5678",
                    Email = "danang@vnstech.com",
                    ManagerName = "Tr·∫ßn Th·ªã B",
                    IsActive = true,
                },
                // Chi nh√°nh c·ªßa VNS Solutions
                new CompanyBranch
                {
                    Id = Guid.Parse("55555555-5555-5555-5555-555555555555"),
                    CompanyId = companyId2,
                    BranchCode = "VNS002-HN",
                    BranchName = "Chi nh√°nh H√† N·ªôi",
                    Address = "654 Ba ƒê√¨nh, Ba ƒê√¨nh, H√† N·ªôi",
                    Phone = "024-8765-4321",
                    Email = "hanoi@vnssolutions.com",
                    ManagerName = "L√™ VƒÉn C",
                    IsActive = true,
                }
            };

            context.CompanyBranches.InsertAllOnSubmit(branches);
            context.SubmitChanges();
            Console.WriteLine($"‚úÖ ƒê√£ t·∫°o {branches.Count} CompanyBranches");
        }

        /// <summary>
        /// T·∫°o Positions
        /// </summary>
        private static void CreatePositions(VnsErp2025DataContext context)
        {
            var companyId1 = Guid.Parse("11111111-1111-1111-1111-111111111111");
            var companyId2 = Guid.Parse("22222222-2222-2222-2222-222222222222");

            var positions = new List<Position>
            {
                // VNS Technology positions
                new Position
                {
                    Id = Guid.Parse("66666666-6666-6666-6666-666666666666"),
                    CompanyId = companyId1,
                    PositionCode = "CEO",
                    PositionName = "T·ªïng Gi√°m ƒê·ªëc",
                    Description = "L√£nh ƒë·∫°o cao nh·∫•t c·ªßa c√¥ng ty",
                    IsManagerLevel = true,
                    IsActive = true,
                },
                new Position
                {
                    Id = Guid.Parse("77777777-7777-7777-7777-777777777777"),
                    CompanyId = companyId1,
                    PositionCode = "CTO",
                    PositionName = "Gi√°m ƒê·ªëc C√¥ng Ngh·ªá",
                    Description = "Qu·∫£n l√Ω c√¥ng ngh·ªá v√† ph√°t tri·ªÉn s·∫£n ph·∫©m",
                    IsManagerLevel = true,
                    IsActive = true,
                },
                new Position
                {
                    Id = Guid.Parse("88888888-8888-8888-8888-888888888888"),
                    CompanyId = companyId1,
                    PositionCode = "DEV",
                    PositionName = "L·∫≠p Tr√¨nh Vi√™n",
                    Description = "Ph√°t tri·ªÉn ph·∫ßn m·ªÅm v√† ·ª©ng d·ª•ng",
                    IsManagerLevel = false,
                    IsActive = true,
                },
                new Position
                {
                    Id = Guid.Parse("99999999-9999-9999-9999-999999999999"),
                    CompanyId = companyId1,
                    PositionCode = "HR",
                    PositionName = "Chuy√™n Vi√™n Nh√¢n S·ª±",
                    Description = "Qu·∫£n l√Ω nh√¢n s·ª± v√† tuy·ªÉn d·ª•ng",
                    IsManagerLevel = false,
                    IsActive = true,
                },
                // VNS Solutions positions
                new Position
                {
                    Id = Guid.Parse("AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA"),
                    CompanyId = companyId2,
                    PositionCode = "CEO",
                    PositionName = "T·ªïng Gi√°m ƒê·ªëc",
                    Description = "L√£nh ƒë·∫°o cao nh·∫•t c·ªßa c√¥ng ty",
                    IsManagerLevel = true,
                    IsActive = true,
                },
                new Position
                {
                    Id = Guid.Parse("BBBBBBBB-BBBB-BBBB-BBBB-BBBBBBBBBBBB"),
                    CompanyId = companyId2,
                    PositionCode = "SALES",
                    PositionName = "Nh√¢n Vi√™n Kinh Doanh",
                    Description = "B√°n h√†ng v√† ph√°t tri·ªÉn kh√°ch h√†ng",
                    IsManagerLevel = false,
                    IsActive = true,
                }
            };

            context.Positions.InsertAllOnSubmit(positions);
            context.SubmitChanges();
            Console.WriteLine($"‚úÖ ƒê√£ t·∫°o {positions.Count} Positions");
        }

        /// <summary>
        /// T·∫°o Departments
        /// </summary>
        private static void CreateDepartments(VnsErp2025DataContext context)
        {
            var companyId1 = Guid.Parse("11111111-1111-1111-1111-111111111111");
            var companyId2 = Guid.Parse("22222222-2222-2222-2222-222222222222");
            var branchId1 = Guid.Parse("33333333-3333-3333-3333-333333333333");
            var branchId2 = Guid.Parse("44444444-4444-4444-4444-444444444444");

            var departments = new List<Department>
            {
                // VNS Technology - C·∫•p 1
                new Department
                {
                    Id = Guid.Parse("CCCCCCCC-CCCC-CCCC-CCCC-CCCCCCCCCCCC"),
                    CompanyId = companyId1,
                    BranchId = null, // Tr·ª• s·ªü ch√≠nh
                    DepartmentCode = "CEO",
                    DepartmentName = "Ban Gi√°m ƒê·ªëc",
                    ParentId = null,
                    Description = "Ban l√£nh ƒë·∫°o cao nh·∫•t c·ªßa c√¥ng ty",
                    IsActive = true,
                },
                new Department
                {
                    Id = Guid.Parse("DDDDDDDD-DDDD-DDDD-DDDD-DDDDDDDDDDDD"),
                    CompanyId = companyId1,
                    BranchId = null,
                    DepartmentCode = "IT",
                    DepartmentName = "Ph√≤ng C√¥ng Ngh·ªá Th√¥ng Tin",
                    ParentId = null,
                    Description = "Ph√°t tri·ªÉn v√† b·∫£o tr√¨ h·ªá th·ªëng c√¥ng ngh·ªá",
                    IsActive = true,
                },
                new Department
                {
                    Id = Guid.Parse("EEEEEEEE-EEEE-EEEE-EEEE-EEEEEEEEEEEE"),
                    CompanyId = companyId1,
                    BranchId = null,
                    DepartmentCode = "HR",
                    DepartmentName = "Ph√≤ng Nh√¢n S·ª±",
                    ParentId = null,
                    Description = "Qu·∫£n l√Ω nh√¢n s·ª± v√† tuy·ªÉn d·ª•ng",
                    IsActive = true,
                },
                // VNS Technology - C·∫•p 2 (Ph√≤ng ban con)
                new Department
                {
                    Id = Guid.Parse("FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF"),
                    CompanyId = companyId1,
                    BranchId = null,
                    DepartmentCode = "IT-DEV",
                    DepartmentName = "B·ªô ph·∫≠n Ph√°t Tri·ªÉn",
                    ParentId = Guid.Parse("DDDDDDDD-DDDD-DDDD-DDDD-DDDDDDDDDDDD"),
                    Description = "Ph√°t tri·ªÉn ph·∫ßn m·ªÅm v√† ·ª©ng d·ª•ng",
                    IsActive = true,
                },
                new Department
                {
                    Id = Guid.Parse("11111111-1111-1111-1111-111111111112"),
                    CompanyId = companyId1,
                    BranchId = null,
                    DepartmentCode = "IT-SUPPORT",
                    DepartmentName = "B·ªô ph·∫≠n H·ªó Tr·ª£",
                    ParentId = Guid.Parse("DDDDDDDD-DDDD-DDDD-DDDD-DDDDDDDDDDDD"),
                    Description = "H·ªó tr·ª£ k·ªπ thu·∫≠t v√† b·∫£o tr√¨ h·ªá th·ªëng",
                    IsActive = true,
                },
                new Department
                {
                    Id = Guid.Parse("22222222-2222-2222-2222-222222222223"),
                    CompanyId = companyId1,
                    BranchId = null,
                    DepartmentCode = "HR-REC",
                    DepartmentName = "B·ªô ph·∫≠n Tuy·ªÉn D·ª•ng",
                    ParentId = Guid.Parse("EEEEEEEE-EEEE-EEEE-EEEE-EEEEEEEEEEEE"),
                    Description = "Tuy·ªÉn d·ª•ng v√† ph·ªèng v·∫•n nh√¢n vi√™n",
                    IsActive = true,
                },
                // VNS Solutions - C·∫•p 1
                new Department
                {
                    Id = Guid.Parse("33333333-3333-3333-3333-333333333334"),
                    CompanyId = companyId2,
                    BranchId = null,
                    DepartmentCode = "CEO",
                    DepartmentName = "Ban Gi√°m ƒê·ªëc",
                    ParentId = null,
                    Description = "Ban l√£nh ƒë·∫°o cao nh·∫•t c·ªßa c√¥ng ty",
                    IsActive = true,
                },
                new Department
                {
                    Id = Guid.Parse("44444444-4444-4444-4444-444444444445"),
                    CompanyId = companyId2,
                    BranchId = null,
                    DepartmentCode = "SALES",
                    DepartmentName = "Ph√≤ng Kinh Doanh",
                    ParentId = null,
                    Description = "B√°n h√†ng v√† ph√°t tri·ªÉn kh√°ch h√†ng",
                    IsActive = true,
                }
            };

            context.Departments.InsertAllOnSubmit(departments);
            context.SubmitChanges();
            Console.WriteLine($"‚úÖ ƒê√£ t·∫°o {departments.Count} Departments");
        }

        /// <summary>
        /// T·∫°o Employees
        /// </summary>
        private static void CreateEmployees(VnsErp2025DataContext context)
        {
            var companyId1 = Guid.Parse("11111111-1111-1111-1111-111111111111");
            var companyId2 = Guid.Parse("22222222-2222-2222-2222-222222222222");
            var branchId1 = Guid.Parse("33333333-3333-3333-3333-333333333333");
            var branchId2 = Guid.Parse("44444444-4444-4444-4444-444444444444");

            var employees = new List<Employee>
            {
                // VNS Technology employees
                new Employee
                {
                    Id = Guid.Parse("55555555-5555-5555-5555-555555555556"),
                    CompanyId = companyId1,
                    BranchId = null,
                    DepartmentId = Guid.Parse("CCCCCCCC-CCCC-CCCC-CCCC-CCCCCCCCCCCC"),
                    PositionId = Guid.Parse("66666666-6666-6666-6666-666666666666"),
                    EmployeeCode = "VNS001-001",
                    FullName = "Nguy·ªÖn VƒÉn Gi√°m ƒê·ªëc",
                    Gender = "Nam",
                    BirthDate = new DateTime(1975, 5, 15),
                    Phone = "0901-234-567",
                    Email = "ceo@vnstech.com",
                    HireDate = new DateTime(2020, 1, 1),
                    ResignDate = null,
                    AvatarPath = "/images/avatars/ceo.jpg",
                    IsActive = true,
                },
                new Employee
                {
                    Id = Guid.Parse("66666666-6666-6666-6666-666666666667"),
                    CompanyId = companyId1,
                    BranchId = null,
                    DepartmentId = Guid.Parse("DDDDDDDD-DDDD-DDDD-DDDD-DDDDDDDDDDDD"),
                    PositionId = Guid.Parse("77777777-7777-7777-7777-777777777777"),
                    EmployeeCode = "VNS001-002",
                    FullName = "Tr·∫ßn Th·ªã C√¥ng Ngh·ªá",
                    Gender = "N·ªØ",
                    BirthDate = new DateTime(1980, 8, 20),
                    Phone = "0902-345-678",
                    Email = "cto@vnstech.com",
                    HireDate = new DateTime(2020, 3, 1),
                    ResignDate = null,
                    AvatarPath = "/images/avatars/cto.jpg",
                    IsActive = true,
                },
                new Employee
                {
                    Id = Guid.Parse("77777777-7777-7777-7777-777777777778"),
                    CompanyId = companyId1,
                    BranchId = null,
                    DepartmentId = Guid.Parse("FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF"),
                    PositionId = Guid.Parse("88888888-8888-8888-8888-888888888888"),
                    EmployeeCode = "VNS001-003",
                    FullName = "L√™ VƒÉn L·∫≠p Tr√¨nh",
                    Gender = "Nam",
                    BirthDate = new DateTime(1990, 12, 10),
                    Phone = "0903-456-789",
                    Email = "dev@vnstech.com",
                    HireDate = new DateTime(2021, 6, 1),
                    ResignDate = null,
                    AvatarPath = "/images/avatars/dev.jpg",
                    IsActive = true,
                },
                new Employee
                {
                    Id = Guid.Parse("88888888-8888-8888-8888-888888888889"),
                    CompanyId = companyId1,
                    BranchId = null,
                    DepartmentId = Guid.Parse("22222222-2222-2222-2222-222222222223"),
                    PositionId = Guid.Parse("99999999-9999-9999-9999-999999999999"),
                    EmployeeCode = "VNS001-004",
                    FullName = "Ph·∫°m Th·ªã Nh√¢n S·ª±",
                    Gender = "N·ªØ",
                    BirthDate = new DateTime(1985, 3, 25),
                    Phone = "0904-567-890",
                    Email = "hr@vnstech.com",
                    HireDate = new DateTime(2021, 9, 1),
                    ResignDate = null,
                    AvatarPath = "/images/avatars/hr.jpg",
                    IsActive = true,
                },
                // VNS Solutions employees
                new Employee
                {
                    Id = Guid.Parse("99999999-9999-9999-9999-99999999999A"),
                    CompanyId = companyId2,
                    BranchId = null,
                    DepartmentId = Guid.Parse("33333333-3333-3333-3333-333333333334"),
                    PositionId = Guid.Parse("AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA"),
                    EmployeeCode = "VNS002-001",
                    FullName = "Ho√†ng VƒÉn Gi√°m ƒê·ªëc",
                    Gender = "Nam",
                    BirthDate = new DateTime(1978, 7, 12),
                    Phone = "0905-678-901",
                    Email = "ceo@vnssolutions.com",
                    HireDate = new DateTime(2021, 1, 1),
                    ResignDate = null,
                    AvatarPath = "/images/avatars/ceo2.jpg",
                    IsActive = true,
                },
                new Employee
                {
                    Id = Guid.Parse("AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAB"),
                    CompanyId = companyId2,
                    BranchId = null,
                    DepartmentId = Guid.Parse("44444444-4444-4444-4444-444444444445"),
                    PositionId = Guid.Parse("BBBBBBBB-BBBB-BBBB-BBBB-BBBBBBBBBBBB"),
                    EmployeeCode = "VNS002-002",
                    FullName = "V√µ Th·ªã Kinh Doanh",
                    Gender = "N·ªØ",
                    BirthDate = new DateTime(1988, 11, 5),
                    Phone = "0906-789-012",
                    Email = "sales@vnssolutions.com",
                    HireDate = new DateTime(2021, 4, 1),
                    ResignDate = null,
                    AvatarPath = "/images/avatars/sales.jpg",
                    IsActive = true,
                }
            };

            context.Employees.InsertAllOnSubmit(employees);
            context.SubmitChanges();
            Console.WriteLine($"‚úÖ ƒê√£ t·∫°o {employees.Count} Employees");
        }

        /// <summary>
        /// T·∫°o context m·ªõi t·ª´ connection string
        /// </summary>
        /// <returns>VnsErp2025DataContext</returns>
        private static VnsErp2025DataContext CreateContext()
        {
            return new VnsErp2025DataContext();
        }

        #endregion
    }
}
