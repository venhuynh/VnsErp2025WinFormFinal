#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Dal.DataContext
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="VnsErp2025Final")]
	public partial class VnsErp2025DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertApplicationUser(ApplicationUser instance);
    partial void UpdateApplicationUser(ApplicationUser instance);
    partial void DeleteApplicationUser(ApplicationUser instance);
    partial void InsertVariantAttribute(VariantAttribute instance);
    partial void UpdateVariantAttribute(VariantAttribute instance);
    partial void DeleteVariantAttribute(VariantAttribute instance);
    partial void InsertAttribute(Attribute instance);
    partial void UpdateAttribute(Attribute instance);
    partial void DeleteAttribute(Attribute instance);
    partial void InsertAttributeValue(AttributeValue instance);
    partial void UpdateAttributeValue(AttributeValue instance);
    partial void DeleteAttributeValue(AttributeValue instance);
    partial void InsertBusinessPartner(BusinessPartner instance);
    partial void UpdateBusinessPartner(BusinessPartner instance);
    partial void DeleteBusinessPartner(BusinessPartner instance);
    partial void InsertBusinessPartner_BusinessPartnerCategory(BusinessPartner_BusinessPartnerCategory instance);
    partial void UpdateBusinessPartner_BusinessPartnerCategory(BusinessPartner_BusinessPartnerCategory instance);
    partial void DeleteBusinessPartner_BusinessPartnerCategory(BusinessPartner_BusinessPartnerCategory instance);
    partial void InsertBusinessPartnerCategory(BusinessPartnerCategory instance);
    partial void UpdateBusinessPartnerCategory(BusinessPartnerCategory instance);
    partial void DeleteBusinessPartnerCategory(BusinessPartnerCategory instance);
    partial void InsertBusinessPartnerContact(BusinessPartnerContact instance);
    partial void UpdateBusinessPartnerContact(BusinessPartnerContact instance);
    partial void DeleteBusinessPartnerContact(BusinessPartnerContact instance);
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertCompanyBranch(CompanyBranch instance);
    partial void UpdateCompanyBranch(CompanyBranch instance);
    partial void DeleteCompanyBranch(CompanyBranch instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertPosition(Position instance);
    partial void UpdatePosition(Position instance);
    partial void DeletePosition(Position instance);
    partial void InsertProductImage(ProductImage instance);
    partial void UpdateProductImage(ProductImage instance);
    partial void DeleteProductImage(ProductImage instance);
    partial void InsertProductService(ProductService instance);
    partial void UpdateProductService(ProductService instance);
    partial void DeleteProductService(ProductService instance);
    partial void InsertProductServiceCategory(ProductServiceCategory instance);
    partial void UpdateProductServiceCategory(ProductServiceCategory instance);
    partial void DeleteProductServiceCategory(ProductServiceCategory instance);
    partial void InsertProductVariant(ProductVariant instance);
    partial void UpdateProductVariant(ProductVariant instance);
    partial void DeleteProductVariant(ProductVariant instance);
    partial void InsertUnitOfMeasure(UnitOfMeasure instance);
    partial void UpdateUnitOfMeasure(UnitOfMeasure instance);
    partial void DeleteUnitOfMeasure(UnitOfMeasure instance);
    #endregion
		
		public VnsErp2025DataContext() : 
				base(global::Dal.Properties.Settings.Default.VnsErp2025FinalConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public VnsErp2025DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VnsErp2025DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VnsErp2025DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VnsErp2025DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ApplicationUser> ApplicationUsers
		{
			get
			{
				return this.GetTable<ApplicationUser>();
			}
		}
		
		public System.Data.Linq.Table<VariantAttribute> VariantAttributes
		{
			get
			{
				return this.GetTable<VariantAttribute>();
			}
		}
		
		public System.Data.Linq.Table<Attribute> Attributes
		{
			get
			{
				return this.GetTable<Attribute>();
			}
		}
		
		public System.Data.Linq.Table<AttributeValue> AttributeValues
		{
			get
			{
				return this.GetTable<AttributeValue>();
			}
		}
		
		public System.Data.Linq.Table<BusinessPartner> BusinessPartners
		{
			get
			{
				return this.GetTable<BusinessPartner>();
			}
		}
		
		public System.Data.Linq.Table<BusinessPartner_BusinessPartnerCategory> BusinessPartner_BusinessPartnerCategories
		{
			get
			{
				return this.GetTable<BusinessPartner_BusinessPartnerCategory>();
			}
		}
		
		public System.Data.Linq.Table<BusinessPartnerCategory> BusinessPartnerCategories
		{
			get
			{
				return this.GetTable<BusinessPartnerCategory>();
			}
		}
		
		public System.Data.Linq.Table<BusinessPartnerContact> BusinessPartnerContacts
		{
			get
			{
				return this.GetTable<BusinessPartnerContact>();
			}
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<CompanyBranch> CompanyBranches
		{
			get
			{
				return this.GetTable<CompanyBranch>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Position> Positions
		{
			get
			{
				return this.GetTable<Position>();
			}
		}
		
		public System.Data.Linq.Table<ProductImage> ProductImages
		{
			get
			{
				return this.GetTable<ProductImage>();
			}
		}
		
		public System.Data.Linq.Table<ProductService> ProductServices
		{
			get
			{
				return this.GetTable<ProductService>();
			}
		}
		
		public System.Data.Linq.Table<ProductServiceCategory> ProductServiceCategories
		{
			get
			{
				return this.GetTable<ProductServiceCategory>();
			}
		}
		
		public System.Data.Linq.Table<ProductVariant> ProductVariants
		{
			get
			{
				return this.GetTable<ProductVariant>();
			}
		}
		
		public System.Data.Linq.Table<UnitOfMeasure> UnitOfMeasures
		{
			get
			{
				return this.GetTable<UnitOfMeasure>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ApplicationUser")]
	public partial class ApplicationUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _UserName;
		
		private string _HashPassword;
		
		private bool _Active;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnHashPasswordChanging(string value);
    partial void OnHashPasswordChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public ApplicationUser()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HashPassword", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string HashPassword
		{
			get
			{
				return this._HashPassword;
			}
			set
			{
				if ((this._HashPassword != value))
				{
					this.OnHashPasswordChanging(value);
					this.SendPropertyChanging();
					this._HashPassword = value;
					this.SendPropertyChanged("HashPassword");
					this.OnHashPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VariantAttribute")]
	public partial class VariantAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _VariantId;
		
		private System.Guid _AttributeId;
		
		private System.Guid _AttributeValueId;
		
		private EntityRef<Attribute> _Attribute;
		
		private EntityRef<AttributeValue> _AttributeValue;
		
		private EntityRef<ProductVariant> _ProductVariant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVariantIdChanging(System.Guid value);
    partial void OnVariantIdChanged();
    partial void OnAttributeIdChanging(System.Guid value);
    partial void OnAttributeIdChanged();
    partial void OnAttributeValueIdChanging(System.Guid value);
    partial void OnAttributeValueIdChanged();
    #endregion
		
		public VariantAttribute()
		{
			this._Attribute = default(EntityRef<Attribute>);
			this._AttributeValue = default(EntityRef<AttributeValue>);
			this._ProductVariant = default(EntityRef<ProductVariant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VariantId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid VariantId
		{
			get
			{
				return this._VariantId;
			}
			set
			{
				if ((this._VariantId != value))
				{
					if (this._ProductVariant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVariantIdChanging(value);
					this.SendPropertyChanging();
					this._VariantId = value;
					this.SendPropertyChanged("VariantId");
					this.OnVariantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttributeId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AttributeId
		{
			get
			{
				return this._AttributeId;
			}
			set
			{
				if ((this._AttributeId != value))
				{
					if (this._Attribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttributeIdChanging(value);
					this.SendPropertyChanging();
					this._AttributeId = value;
					this.SendPropertyChanged("AttributeId");
					this.OnAttributeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttributeValueId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AttributeValueId
		{
			get
			{
				return this._AttributeValueId;
			}
			set
			{
				if ((this._AttributeValueId != value))
				{
					if (this._AttributeValue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttributeValueIdChanging(value);
					this.SendPropertyChanging();
					this._AttributeValueId = value;
					this.SendPropertyChanged("AttributeValueId");
					this.OnAttributeValueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attribute_VariantAttribute", Storage="_Attribute", ThisKey="AttributeId", OtherKey="Id", IsForeignKey=true)]
		public Attribute Attribute
		{
			get
			{
				return this._Attribute.Entity;
			}
			set
			{
				Attribute previousValue = this._Attribute.Entity;
				if (((previousValue != value) 
							|| (this._Attribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attribute.Entity = null;
						previousValue.VariantAttributes.Remove(this);
					}
					this._Attribute.Entity = value;
					if ((value != null))
					{
						value.VariantAttributes.Add(this);
						this._AttributeId = value.Id;
					}
					else
					{
						this._AttributeId = default(System.Guid);
					}
					this.SendPropertyChanged("Attribute");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AttributeValue_VariantAttribute", Storage="_AttributeValue", ThisKey="AttributeValueId", OtherKey="Id", IsForeignKey=true)]
		public AttributeValue AttributeValue
		{
			get
			{
				return this._AttributeValue.Entity;
			}
			set
			{
				AttributeValue previousValue = this._AttributeValue.Entity;
				if (((previousValue != value) 
							|| (this._AttributeValue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AttributeValue.Entity = null;
						previousValue.VariantAttributes.Remove(this);
					}
					this._AttributeValue.Entity = value;
					if ((value != null))
					{
						value.VariantAttributes.Add(this);
						this._AttributeValueId = value.Id;
					}
					else
					{
						this._AttributeValueId = default(System.Guid);
					}
					this.SendPropertyChanged("AttributeValue");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductVariant_VariantAttribute", Storage="_ProductVariant", ThisKey="VariantId", OtherKey="Id", IsForeignKey=true)]
		public ProductVariant ProductVariant
		{
			get
			{
				return this._ProductVariant.Entity;
			}
			set
			{
				ProductVariant previousValue = this._ProductVariant.Entity;
				if (((previousValue != value) 
							|| (this._ProductVariant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductVariant.Entity = null;
						previousValue.VariantAttributes.Remove(this);
					}
					this._ProductVariant.Entity = value;
					if ((value != null))
					{
						value.VariantAttributes.Add(this);
						this._VariantId = value.Id;
					}
					else
					{
						this._VariantId = default(System.Guid);
					}
					this.SendPropertyChanged("ProductVariant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Attribute")]
	public partial class Attribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private string _DataType;
		
		private string _Description;
		
		private EntitySet<VariantAttribute> _VariantAttributes;
		
		private EntitySet<AttributeValue> _AttributeValues;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDataTypeChanging(string value);
    partial void OnDataTypeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Attribute()
		{
			this._VariantAttributes = new EntitySet<VariantAttribute>(new Action<VariantAttribute>(this.attach_VariantAttributes), new Action<VariantAttribute>(this.detach_VariantAttributes));
			this._AttributeValues = new EntitySet<AttributeValue>(new Action<AttributeValue>(this.attach_AttributeValues), new Action<AttributeValue>(this.detach_AttributeValues));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DataType
		{
			get
			{
				return this._DataType;
			}
			set
			{
				if ((this._DataType != value))
				{
					this.OnDataTypeChanging(value);
					this.SendPropertyChanging();
					this._DataType = value;
					this.SendPropertyChanged("DataType");
					this.OnDataTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attribute_VariantAttribute", Storage="_VariantAttributes", ThisKey="Id", OtherKey="AttributeId")]
		public EntitySet<VariantAttribute> VariantAttributes
		{
			get
			{
				return this._VariantAttributes;
			}
			set
			{
				this._VariantAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attribute_AttributeValue", Storage="_AttributeValues", ThisKey="Id", OtherKey="AttributeId")]
		public EntitySet<AttributeValue> AttributeValues
		{
			get
			{
				return this._AttributeValues;
			}
			set
			{
				this._AttributeValues.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VariantAttributes(VariantAttribute entity)
		{
			this.SendPropertyChanging();
			entity.Attribute = this;
		}
		
		private void detach_VariantAttributes(VariantAttribute entity)
		{
			this.SendPropertyChanging();
			entity.Attribute = null;
		}
		
		private void attach_AttributeValues(AttributeValue entity)
		{
			this.SendPropertyChanging();
			entity.Attribute = this;
		}
		
		private void detach_AttributeValues(AttributeValue entity)
		{
			this.SendPropertyChanging();
			entity.Attribute = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AttributeValue")]
	public partial class AttributeValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _AttributeId;
		
		private string _Value;
		
		private EntitySet<VariantAttribute> _VariantAttributes;
		
		private EntityRef<Attribute> _Attribute;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnAttributeIdChanging(System.Guid value);
    partial void OnAttributeIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public AttributeValue()
		{
			this._VariantAttributes = new EntitySet<VariantAttribute>(new Action<VariantAttribute>(this.attach_VariantAttributes), new Action<VariantAttribute>(this.detach_VariantAttributes));
			this._Attribute = default(EntityRef<Attribute>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttributeId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AttributeId
		{
			get
			{
				return this._AttributeId;
			}
			set
			{
				if ((this._AttributeId != value))
				{
					if (this._Attribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttributeIdChanging(value);
					this.SendPropertyChanging();
					this._AttributeId = value;
					this.SendPropertyChanged("AttributeId");
					this.OnAttributeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AttributeValue_VariantAttribute", Storage="_VariantAttributes", ThisKey="Id", OtherKey="AttributeValueId")]
		public EntitySet<VariantAttribute> VariantAttributes
		{
			get
			{
				return this._VariantAttributes;
			}
			set
			{
				this._VariantAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attribute_AttributeValue", Storage="_Attribute", ThisKey="AttributeId", OtherKey="Id", IsForeignKey=true)]
		public Attribute Attribute
		{
			get
			{
				return this._Attribute.Entity;
			}
			set
			{
				Attribute previousValue = this._Attribute.Entity;
				if (((previousValue != value) 
							|| (this._Attribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attribute.Entity = null;
						previousValue.AttributeValues.Remove(this);
					}
					this._Attribute.Entity = value;
					if ((value != null))
					{
						value.AttributeValues.Add(this);
						this._AttributeId = value.Id;
					}
					else
					{
						this._AttributeId = default(System.Guid);
					}
					this.SendPropertyChanged("Attribute");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VariantAttributes(VariantAttribute entity)
		{
			this.SendPropertyChanging();
			entity.AttributeValue = this;
		}
		
		private void detach_VariantAttributes(VariantAttribute entity)
		{
			this.SendPropertyChanging();
			entity.AttributeValue = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BusinessPartner")]
	public partial class BusinessPartner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _PartnerCode;
		
		private string _PartnerName;
		
		private int _PartnerType;
		
		private string _TaxCode;
		
		private string _Phone;
		
		private string _Email;
		
		private string _Website;
		
		private string _Address;
		
		private string _City;
		
		private string _Country;
		
		private string _ContactPerson;
		
		private string _ContactPosition;
		
		private string _BankAccount;
		
		private string _BankName;
		
		private System.Nullable<decimal> _CreditLimit;
		
		private string _PaymentTerm;
		
		private bool _IsActive;
		
		private System.DateTime _CreatedDate;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private EntitySet<BusinessPartner_BusinessPartnerCategory> _BusinessPartner_BusinessPartnerCategories;
		
		private EntitySet<BusinessPartnerContact> _BusinessPartnerContacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnPartnerCodeChanging(string value);
    partial void OnPartnerCodeChanged();
    partial void OnPartnerNameChanging(string value);
    partial void OnPartnerNameChanged();
    partial void OnPartnerTypeChanging(int value);
    partial void OnPartnerTypeChanged();
    partial void OnTaxCodeChanging(string value);
    partial void OnTaxCodeChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnContactPersonChanging(string value);
    partial void OnContactPersonChanged();
    partial void OnContactPositionChanging(string value);
    partial void OnContactPositionChanged();
    partial void OnBankAccountChanging(string value);
    partial void OnBankAccountChanged();
    partial void OnBankNameChanging(string value);
    partial void OnBankNameChanged();
    partial void OnCreditLimitChanging(System.Nullable<decimal> value);
    partial void OnCreditLimitChanged();
    partial void OnPaymentTermChanging(string value);
    partial void OnPaymentTermChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    #endregion
		
		public BusinessPartner()
		{
			this._BusinessPartner_BusinessPartnerCategories = new EntitySet<BusinessPartner_BusinessPartnerCategory>(new Action<BusinessPartner_BusinessPartnerCategory>(this.attach_BusinessPartner_BusinessPartnerCategories), new Action<BusinessPartner_BusinessPartnerCategory>(this.detach_BusinessPartner_BusinessPartnerCategories));
			this._BusinessPartnerContacts = new EntitySet<BusinessPartnerContact>(new Action<BusinessPartnerContact>(this.attach_BusinessPartnerContacts), new Action<BusinessPartnerContact>(this.detach_BusinessPartnerContacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartnerCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PartnerCode
		{
			get
			{
				return this._PartnerCode;
			}
			set
			{
				if ((this._PartnerCode != value))
				{
					this.OnPartnerCodeChanging(value);
					this.SendPropertyChanging();
					this._PartnerCode = value;
					this.SendPropertyChanged("PartnerCode");
					this.OnPartnerCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartnerName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string PartnerName
		{
			get
			{
				return this._PartnerName;
			}
			set
			{
				if ((this._PartnerName != value))
				{
					this.OnPartnerNameChanging(value);
					this.SendPropertyChanging();
					this._PartnerName = value;
					this.SendPropertyChanged("PartnerName");
					this.OnPartnerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartnerType", DbType="Int NOT NULL")]
		public int PartnerType
		{
			get
			{
				return this._PartnerType;
			}
			set
			{
				if ((this._PartnerType != value))
				{
					this.OnPartnerTypeChanging(value);
					this.SendPropertyChanging();
					this._PartnerType = value;
					this.SendPropertyChanged("PartnerType");
					this.OnPartnerTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxCode", DbType="NVarChar(50)")]
		public string TaxCode
		{
			get
			{
				return this._TaxCode;
			}
			set
			{
				if ((this._TaxCode != value))
				{
					this.OnTaxCodeChanging(value);
					this.SendPropertyChanging();
					this._TaxCode = value;
					this.SendPropertyChanged("TaxCode");
					this.OnTaxCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="NVarChar(100)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(255)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(100)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(100)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactPerson", DbType="NVarChar(100)")]
		public string ContactPerson
		{
			get
			{
				return this._ContactPerson;
			}
			set
			{
				if ((this._ContactPerson != value))
				{
					this.OnContactPersonChanging(value);
					this.SendPropertyChanging();
					this._ContactPerson = value;
					this.SendPropertyChanged("ContactPerson");
					this.OnContactPersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactPosition", DbType="NVarChar(100)")]
		public string ContactPosition
		{
			get
			{
				return this._ContactPosition;
			}
			set
			{
				if ((this._ContactPosition != value))
				{
					this.OnContactPositionChanging(value);
					this.SendPropertyChanging();
					this._ContactPosition = value;
					this.SendPropertyChanged("ContactPosition");
					this.OnContactPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankAccount", DbType="NVarChar(50)")]
		public string BankAccount
		{
			get
			{
				return this._BankAccount;
			}
			set
			{
				if ((this._BankAccount != value))
				{
					this.OnBankAccountChanging(value);
					this.SendPropertyChanging();
					this._BankAccount = value;
					this.SendPropertyChanged("BankAccount");
					this.OnBankAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankName", DbType="NVarChar(100)")]
		public string BankName
		{
			get
			{
				return this._BankName;
			}
			set
			{
				if ((this._BankName != value))
				{
					this.OnBankNameChanging(value);
					this.SendPropertyChanging();
					this._BankName = value;
					this.SendPropertyChanged("BankName");
					this.OnBankNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreditLimit", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> CreditLimit
		{
			get
			{
				return this._CreditLimit;
			}
			set
			{
				if ((this._CreditLimit != value))
				{
					this.OnCreditLimitChanging(value);
					this.SendPropertyChanging();
					this._CreditLimit = value;
					this.SendPropertyChanged("CreditLimit");
					this.OnCreditLimitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentTerm", DbType="NVarChar(50)")]
		public string PaymentTerm
		{
			get
			{
				return this._PaymentTerm;
			}
			set
			{
				if ((this._PaymentTerm != value))
				{
					this.OnPaymentTermChanging(value);
					this.SendPropertyChanging();
					this._PaymentTerm = value;
					this.SendPropertyChanged("PaymentTerm");
					this.OnPaymentTermChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessPartner_BusinessPartner_BusinessPartnerCategory", Storage="_BusinessPartner_BusinessPartnerCategories", ThisKey="Id", OtherKey="PartnerId")]
		public EntitySet<BusinessPartner_BusinessPartnerCategory> BusinessPartner_BusinessPartnerCategories
		{
			get
			{
				return this._BusinessPartner_BusinessPartnerCategories;
			}
			set
			{
				this._BusinessPartner_BusinessPartnerCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessPartner_BusinessPartnerContact", Storage="_BusinessPartnerContacts", ThisKey="Id", OtherKey="PartnerId")]
		public EntitySet<BusinessPartnerContact> BusinessPartnerContacts
		{
			get
			{
				return this._BusinessPartnerContacts;
			}
			set
			{
				this._BusinessPartnerContacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BusinessPartner_BusinessPartnerCategories(BusinessPartner_BusinessPartnerCategory entity)
		{
			this.SendPropertyChanging();
			entity.BusinessPartner = this;
		}
		
		private void detach_BusinessPartner_BusinessPartnerCategories(BusinessPartner_BusinessPartnerCategory entity)
		{
			this.SendPropertyChanging();
			entity.BusinessPartner = null;
		}
		
		private void attach_BusinessPartnerContacts(BusinessPartnerContact entity)
		{
			this.SendPropertyChanging();
			entity.BusinessPartner = this;
		}
		
		private void detach_BusinessPartnerContacts(BusinessPartnerContact entity)
		{
			this.SendPropertyChanging();
			entity.BusinessPartner = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BusinessPartner_BusinessPartnerCategory")]
	public partial class BusinessPartner_BusinessPartnerCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PartnerId;
		
		private System.Guid _CategoryId;
		
		private EntityRef<BusinessPartner> _BusinessPartner;
		
		private EntityRef<BusinessPartnerCategory> _BusinessPartnerCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPartnerIdChanging(System.Guid value);
    partial void OnPartnerIdChanged();
    partial void OnCategoryIdChanging(System.Guid value);
    partial void OnCategoryIdChanged();
    #endregion
		
		public BusinessPartner_BusinessPartnerCategory()
		{
			this._BusinessPartner = default(EntityRef<BusinessPartner>);
			this._BusinessPartnerCategory = default(EntityRef<BusinessPartnerCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartnerId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PartnerId
		{
			get
			{
				return this._PartnerId;
			}
			set
			{
				if ((this._PartnerId != value))
				{
					if (this._BusinessPartner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartnerIdChanging(value);
					this.SendPropertyChanging();
					this._PartnerId = value;
					this.SendPropertyChanged("PartnerId");
					this.OnPartnerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._BusinessPartnerCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessPartner_BusinessPartner_BusinessPartnerCategory", Storage="_BusinessPartner", ThisKey="PartnerId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public BusinessPartner BusinessPartner
		{
			get
			{
				return this._BusinessPartner.Entity;
			}
			set
			{
				BusinessPartner previousValue = this._BusinessPartner.Entity;
				if (((previousValue != value) 
							|| (this._BusinessPartner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BusinessPartner.Entity = null;
						previousValue.BusinessPartner_BusinessPartnerCategories.Remove(this);
					}
					this._BusinessPartner.Entity = value;
					if ((value != null))
					{
						value.BusinessPartner_BusinessPartnerCategories.Add(this);
						this._PartnerId = value.Id;
					}
					else
					{
						this._PartnerId = default(System.Guid);
					}
					this.SendPropertyChanged("BusinessPartner");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessPartnerCategory_BusinessPartner_BusinessPartnerCategory", Storage="_BusinessPartnerCategory", ThisKey="CategoryId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public BusinessPartnerCategory BusinessPartnerCategory
		{
			get
			{
				return this._BusinessPartnerCategory.Entity;
			}
			set
			{
				BusinessPartnerCategory previousValue = this._BusinessPartnerCategory.Entity;
				if (((previousValue != value) 
							|| (this._BusinessPartnerCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BusinessPartnerCategory.Entity = null;
						previousValue.BusinessPartner_BusinessPartnerCategories.Remove(this);
					}
					this._BusinessPartnerCategory.Entity = value;
					if ((value != null))
					{
						value.BusinessPartner_BusinessPartnerCategories.Add(this);
						this._CategoryId = value.Id;
					}
					else
					{
						this._CategoryId = default(System.Guid);
					}
					this.SendPropertyChanged("BusinessPartnerCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BusinessPartnerCategory")]
	public partial class BusinessPartnerCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _CategoryName;
		
		private string _Description;
		
		private System.Nullable<System.Guid> _ParentId;
		
		private EntitySet<BusinessPartner_BusinessPartnerCategory> _BusinessPartner_BusinessPartnerCategories;
		
		private EntitySet<BusinessPartnerCategory> _BusinessPartnerCategories;
		
		private EntityRef<BusinessPartnerCategory> _BusinessPartnerCategory1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnParentIdChanging(System.Nullable<System.Guid> value);
    partial void OnParentIdChanged();
    #endregion
		
		public BusinessPartnerCategory()
		{
			this._BusinessPartner_BusinessPartnerCategories = new EntitySet<BusinessPartner_BusinessPartnerCategory>(new Action<BusinessPartner_BusinessPartnerCategory>(this.attach_BusinessPartner_BusinessPartnerCategories), new Action<BusinessPartner_BusinessPartnerCategory>(this.detach_BusinessPartner_BusinessPartnerCategories));
			this._BusinessPartnerCategories = new EntitySet<BusinessPartnerCategory>(new Action<BusinessPartnerCategory>(this.attach_BusinessPartnerCategories), new Action<BusinessPartnerCategory>(this.detach_BusinessPartnerCategories));
			this._BusinessPartnerCategory1 = default(EntityRef<BusinessPartnerCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					if (this._BusinessPartnerCategory1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessPartnerCategory_BusinessPartner_BusinessPartnerCategory", Storage="_BusinessPartner_BusinessPartnerCategories", ThisKey="Id", OtherKey="CategoryId")]
		public EntitySet<BusinessPartner_BusinessPartnerCategory> BusinessPartner_BusinessPartnerCategories
		{
			get
			{
				return this._BusinessPartner_BusinessPartnerCategories;
			}
			set
			{
				this._BusinessPartner_BusinessPartnerCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessPartnerCategory_BusinessPartnerCategory", Storage="_BusinessPartnerCategories", ThisKey="Id", OtherKey="ParentId")]
		public EntitySet<BusinessPartnerCategory> BusinessPartnerCategories
		{
			get
			{
				return this._BusinessPartnerCategories;
			}
			set
			{
				this._BusinessPartnerCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessPartnerCategory_BusinessPartnerCategory", Storage="_BusinessPartnerCategory1", ThisKey="ParentId", OtherKey="Id", IsForeignKey=true)]
		public BusinessPartnerCategory BusinessPartnerCategory1
		{
			get
			{
				return this._BusinessPartnerCategory1.Entity;
			}
			set
			{
				BusinessPartnerCategory previousValue = this._BusinessPartnerCategory1.Entity;
				if (((previousValue != value) 
							|| (this._BusinessPartnerCategory1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BusinessPartnerCategory1.Entity = null;
						previousValue.BusinessPartnerCategories.Remove(this);
					}
					this._BusinessPartnerCategory1.Entity = value;
					if ((value != null))
					{
						value.BusinessPartnerCategories.Add(this);
						this._ParentId = value.Id;
					}
					else
					{
						this._ParentId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("BusinessPartnerCategory1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BusinessPartner_BusinessPartnerCategories(BusinessPartner_BusinessPartnerCategory entity)
		{
			this.SendPropertyChanging();
			entity.BusinessPartnerCategory = this;
		}
		
		private void detach_BusinessPartner_BusinessPartnerCategories(BusinessPartner_BusinessPartnerCategory entity)
		{
			this.SendPropertyChanging();
			entity.BusinessPartnerCategory = null;
		}
		
		private void attach_BusinessPartnerCategories(BusinessPartnerCategory entity)
		{
			this.SendPropertyChanging();
			entity.BusinessPartnerCategory1 = this;
		}
		
		private void detach_BusinessPartnerCategories(BusinessPartnerCategory entity)
		{
			this.SendPropertyChanging();
			entity.BusinessPartnerCategory1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BusinessPartnerContact")]
	public partial class BusinessPartnerContact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _PartnerId;
		
		private string _FullName;
		
		private string _Position;
		
		private string _Phone;
		
		private string _Email;
		
		private bool _IsPrimary;
		
		private EntityRef<BusinessPartner> _BusinessPartner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnPartnerIdChanging(System.Guid value);
    partial void OnPartnerIdChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnIsPrimaryChanging(bool value);
    partial void OnIsPrimaryChanged();
    #endregion
		
		public BusinessPartnerContact()
		{
			this._BusinessPartner = default(EntityRef<BusinessPartner>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartnerId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PartnerId
		{
			get
			{
				return this._PartnerId;
			}
			set
			{
				if ((this._PartnerId != value))
				{
					if (this._BusinessPartner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartnerIdChanging(value);
					this.SendPropertyChanging();
					this._PartnerId = value;
					this.SendPropertyChanged("PartnerId");
					this.OnPartnerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(100)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPrimary", DbType="Bit NOT NULL")]
		public bool IsPrimary
		{
			get
			{
				return this._IsPrimary;
			}
			set
			{
				if ((this._IsPrimary != value))
				{
					this.OnIsPrimaryChanging(value);
					this.SendPropertyChanging();
					this._IsPrimary = value;
					this.SendPropertyChanged("IsPrimary");
					this.OnIsPrimaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessPartner_BusinessPartnerContact", Storage="_BusinessPartner", ThisKey="PartnerId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public BusinessPartner BusinessPartner
		{
			get
			{
				return this._BusinessPartner.Entity;
			}
			set
			{
				BusinessPartner previousValue = this._BusinessPartner.Entity;
				if (((previousValue != value) 
							|| (this._BusinessPartner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BusinessPartner.Entity = null;
						previousValue.BusinessPartnerContacts.Remove(this);
					}
					this._BusinessPartner.Entity = value;
					if ((value != null))
					{
						value.BusinessPartnerContacts.Add(this);
						this._PartnerId = value.Id;
					}
					else
					{
						this._PartnerId = default(System.Guid);
					}
					this.SendPropertyChanged("BusinessPartner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Company")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _CompanyCode;
		
		private string _CompanyName;
		
		private string _TaxCode;
		
		private string _Phone;
		
		private string _Email;
		
		private string _Website;
		
		private string _Address;
		
		private string _Country;
		
		private string _LogoPath;
		
		private bool _IsActive;
		
		private System.DateTime _CreatedDate;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private EntitySet<CompanyBranch> _CompanyBranches;
		
		private EntitySet<Department> _Departments;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<Position> _Positions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnCompanyCodeChanging(string value);
    partial void OnCompanyCodeChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnTaxCodeChanging(string value);
    partial void OnTaxCodeChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnLogoPathChanging(string value);
    partial void OnLogoPathChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    #endregion
		
		public Company()
		{
			this._CompanyBranches = new EntitySet<CompanyBranch>(new Action<CompanyBranch>(this.attach_CompanyBranches), new Action<CompanyBranch>(this.detach_CompanyBranches));
			this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Positions = new EntitySet<Position>(new Action<Position>(this.attach_Positions), new Action<Position>(this.detach_Positions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CompanyCode
		{
			get
			{
				return this._CompanyCode;
			}
			set
			{
				if ((this._CompanyCode != value))
				{
					this.OnCompanyCodeChanging(value);
					this.SendPropertyChanging();
					this._CompanyCode = value;
					this.SendPropertyChanged("CompanyCode");
					this.OnCompanyCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxCode", DbType="NVarChar(50)")]
		public string TaxCode
		{
			get
			{
				return this._TaxCode;
			}
			set
			{
				if ((this._TaxCode != value))
				{
					this.OnTaxCodeChanging(value);
					this.SendPropertyChanging();
					this._TaxCode = value;
					this.SendPropertyChanged("TaxCode");
					this.OnTaxCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="NVarChar(100)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(255)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(100)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogoPath", DbType="NVarChar(500)")]
		public string LogoPath
		{
			get
			{
				return this._LogoPath;
			}
			set
			{
				if ((this._LogoPath != value))
				{
					this.OnLogoPathChanging(value);
					this.SendPropertyChanging();
					this._LogoPath = value;
					this.SendPropertyChanged("LogoPath");
					this.OnLogoPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CompanyBranch", Storage="_CompanyBranches", ThisKey="Id", OtherKey="CompanyId")]
		public EntitySet<CompanyBranch> CompanyBranches
		{
			get
			{
				return this._CompanyBranches;
			}
			set
			{
				this._CompanyBranches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Department", Storage="_Departments", ThisKey="Id", OtherKey="CompanyId")]
		public EntitySet<Department> Departments
		{
			get
			{
				return this._Departments;
			}
			set
			{
				this._Departments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Employee", Storage="_Employees", ThisKey="Id", OtherKey="CompanyId")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Position", Storage="_Positions", ThisKey="Id", OtherKey="CompanyId")]
		public EntitySet<Position> Positions
		{
			get
			{
				return this._Positions;
			}
			set
			{
				this._Positions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompanyBranches(CompanyBranch entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_CompanyBranches(CompanyBranch entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Positions(Position entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Positions(Position entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompanyBranch")]
	public partial class CompanyBranch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _CompanyId;
		
		private string _BranchCode;
		
		private string _BranchName;
		
		private string _Address;
		
		private string _Phone;
		
		private string _Email;
		
		private string _ManagerName;
		
		private bool _IsActive;
		
		private EntitySet<Department> _Departments;
		
		private EntitySet<Employee> _Employees;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnCompanyIdChanging(System.Guid value);
    partial void OnCompanyIdChanged();
    partial void OnBranchCodeChanging(string value);
    partial void OnBranchCodeChanged();
    partial void OnBranchNameChanging(string value);
    partial void OnBranchNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnManagerNameChanging(string value);
    partial void OnManagerNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public CompanyBranch()
		{
			this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BranchCode
		{
			get
			{
				return this._BranchCode;
			}
			set
			{
				if ((this._BranchCode != value))
				{
					this.OnBranchCodeChanging(value);
					this.SendPropertyChanging();
					this._BranchCode = value;
					this.SendPropertyChanged("BranchCode");
					this.OnBranchCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string BranchName
		{
			get
			{
				return this._BranchName;
			}
			set
			{
				if ((this._BranchName != value))
				{
					this.OnBranchNameChanging(value);
					this.SendPropertyChanging();
					this._BranchName = value;
					this.SendPropertyChanged("BranchName");
					this.OnBranchNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(255)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagerName", DbType="NVarChar(100)")]
		public string ManagerName
		{
			get
			{
				return this._ManagerName;
			}
			set
			{
				if ((this._ManagerName != value))
				{
					this.OnManagerNameChanging(value);
					this.SendPropertyChanging();
					this._ManagerName = value;
					this.SendPropertyChanged("ManagerName");
					this.OnManagerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyBranch_Department", Storage="_Departments", ThisKey="Id", OtherKey="BranchId")]
		public EntitySet<Department> Departments
		{
			get
			{
				return this._Departments;
			}
			set
			{
				this._Departments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyBranch_Employee", Storage="_Employees", ThisKey="Id", OtherKey="BranchId")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CompanyBranch", Storage="_Company", ThisKey="CompanyId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.CompanyBranches.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.CompanyBranches.Add(this);
						this._CompanyId = value.Id;
					}
					else
					{
						this._CompanyId = default(System.Guid);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.CompanyBranch = this;
		}
		
		private void detach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.CompanyBranch = null;
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.CompanyBranch = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.CompanyBranch = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _CompanyId;
		
		private System.Nullable<System.Guid> _BranchId;
		
		private string _DepartmentCode;
		
		private string _DepartmentName;
		
		private System.Nullable<System.Guid> _ParentId;
		
		private string _Description;
		
		private bool _IsActive;
		
		private EntitySet<Department> _Departments;
		
		private EntitySet<Employee> _Employees;
		
		private EntityRef<CompanyBranch> _CompanyBranch;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<Department> _Department1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnCompanyIdChanging(System.Guid value);
    partial void OnCompanyIdChanged();
    partial void OnBranchIdChanging(System.Nullable<System.Guid> value);
    partial void OnBranchIdChanged();
    partial void OnDepartmentCodeChanging(string value);
    partial void OnDepartmentCodeChanged();
    partial void OnDepartmentNameChanging(string value);
    partial void OnDepartmentNameChanged();
    partial void OnParentIdChanging(System.Nullable<System.Guid> value);
    partial void OnParentIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public Department()
		{
			this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._CompanyBranch = default(EntityRef<CompanyBranch>);
			this._Company = default(EntityRef<Company>);
			this._Department1 = default(EntityRef<Department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> BranchId
		{
			get
			{
				return this._BranchId;
			}
			set
			{
				if ((this._BranchId != value))
				{
					if (this._CompanyBranch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranchIdChanging(value);
					this.SendPropertyChanging();
					this._BranchId = value;
					this.SendPropertyChanged("BranchId");
					this.OnBranchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DepartmentCode
		{
			get
			{
				return this._DepartmentCode;
			}
			set
			{
				if ((this._DepartmentCode != value))
				{
					this.OnDepartmentCodeChanging(value);
					this.SendPropertyChanging();
					this._DepartmentCode = value;
					this.SendPropertyChanged("DepartmentCode");
					this.OnDepartmentCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string DepartmentName
		{
			get
			{
				return this._DepartmentName;
			}
			set
			{
				if ((this._DepartmentName != value))
				{
					this.OnDepartmentNameChanging(value);
					this.SendPropertyChanging();
					this._DepartmentName = value;
					this.SendPropertyChanged("DepartmentName");
					this.OnDepartmentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					if (this._Department1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Department", Storage="_Departments", ThisKey="Id", OtherKey="ParentId")]
		public EntitySet<Department> Departments
		{
			get
			{
				return this._Departments;
			}
			set
			{
				this._Departments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Employee", Storage="_Employees", ThisKey="Id", OtherKey="DepartmentId")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyBranch_Department", Storage="_CompanyBranch", ThisKey="BranchId", OtherKey="Id", IsForeignKey=true)]
		public CompanyBranch CompanyBranch
		{
			get
			{
				return this._CompanyBranch.Entity;
			}
			set
			{
				CompanyBranch previousValue = this._CompanyBranch.Entity;
				if (((previousValue != value) 
							|| (this._CompanyBranch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyBranch.Entity = null;
						previousValue.Departments.Remove(this);
					}
					this._CompanyBranch.Entity = value;
					if ((value != null))
					{
						value.Departments.Add(this);
						this._BranchId = value.Id;
					}
					else
					{
						this._BranchId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("CompanyBranch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Department", Storage="_Company", ThisKey="CompanyId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Departments.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Departments.Add(this);
						this._CompanyId = value.Id;
					}
					else
					{
						this._CompanyId = default(System.Guid);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Department", Storage="_Department1", ThisKey="ParentId", OtherKey="Id", IsForeignKey=true)]
		public Department Department1
		{
			get
			{
				return this._Department1.Entity;
			}
			set
			{
				Department previousValue = this._Department1.Entity;
				if (((previousValue != value) 
							|| (this._Department1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department1.Entity = null;
						previousValue.Departments.Remove(this);
					}
					this._Department1.Entity = value;
					if ((value != null))
					{
						value.Departments.Add(this);
						this._ParentId = value.Id;
					}
					else
					{
						this._ParentId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Department1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Department1 = this;
		}
		
		private void detach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Department1 = null;
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _CompanyId;
		
		private System.Nullable<System.Guid> _BranchId;
		
		private System.Nullable<System.Guid> _DepartmentId;
		
		private System.Nullable<System.Guid> _PositionId;
		
		private string _EmployeeCode;
		
		private string _FullName;
		
		private string _Gender;
		
		private System.Nullable<System.DateTime> _BirthDate;
		
		private string _Phone;
		
		private string _Email;
		
		private System.Nullable<System.DateTime> _HireDate;
		
		private System.Nullable<System.DateTime> _ResignDate;
		
		private string _AvatarPath;
		
		private bool _IsActive;
		
		private EntityRef<CompanyBranch> _CompanyBranch;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<Position> _Position;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnCompanyIdChanging(System.Guid value);
    partial void OnCompanyIdChanged();
    partial void OnBranchIdChanging(System.Nullable<System.Guid> value);
    partial void OnBranchIdChanged();
    partial void OnDepartmentIdChanging(System.Nullable<System.Guid> value);
    partial void OnDepartmentIdChanged();
    partial void OnPositionIdChanging(System.Nullable<System.Guid> value);
    partial void OnPositionIdChanged();
    partial void OnEmployeeCodeChanging(string value);
    partial void OnEmployeeCodeChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDateChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnHireDateChanging(System.Nullable<System.DateTime> value);
    partial void OnHireDateChanged();
    partial void OnResignDateChanging(System.Nullable<System.DateTime> value);
    partial void OnResignDateChanged();
    partial void OnAvatarPathChanging(string value);
    partial void OnAvatarPathChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public Employee()
		{
			this._CompanyBranch = default(EntityRef<CompanyBranch>);
			this._Company = default(EntityRef<Company>);
			this._Department = default(EntityRef<Department>);
			this._Position = default(EntityRef<Position>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> BranchId
		{
			get
			{
				return this._BranchId;
			}
			set
			{
				if ((this._BranchId != value))
				{
					if (this._CompanyBranch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranchIdChanging(value);
					this.SendPropertyChanging();
					this._BranchId = value;
					this.SendPropertyChanged("BranchId");
					this.OnBranchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PositionId
		{
			get
			{
				return this._PositionId;
			}
			set
			{
				if ((this._PositionId != value))
				{
					if (this._Position.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPositionIdChanging(value);
					this.SendPropertyChanging();
					this._PositionId = value;
					this.SendPropertyChanged("PositionId");
					this.OnPositionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string EmployeeCode
		{
			get
			{
				return this._EmployeeCode;
			}
			set
			{
				if ((this._EmployeeCode != value))
				{
					this.OnEmployeeCodeChanging(value);
					this.SendPropertyChanging();
					this._EmployeeCode = value;
					this.SendPropertyChanged("EmployeeCode");
					this.OnEmployeeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(10)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="Date")]
		public System.Nullable<System.DateTime> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HireDate", DbType="Date")]
		public System.Nullable<System.DateTime> HireDate
		{
			get
			{
				return this._HireDate;
			}
			set
			{
				if ((this._HireDate != value))
				{
					this.OnHireDateChanging(value);
					this.SendPropertyChanging();
					this._HireDate = value;
					this.SendPropertyChanged("HireDate");
					this.OnHireDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResignDate", DbType="Date")]
		public System.Nullable<System.DateTime> ResignDate
		{
			get
			{
				return this._ResignDate;
			}
			set
			{
				if ((this._ResignDate != value))
				{
					this.OnResignDateChanging(value);
					this.SendPropertyChanging();
					this._ResignDate = value;
					this.SendPropertyChanged("ResignDate");
					this.OnResignDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvatarPath", DbType="NVarChar(500)")]
		public string AvatarPath
		{
			get
			{
				return this._AvatarPath;
			}
			set
			{
				if ((this._AvatarPath != value))
				{
					this.OnAvatarPathChanging(value);
					this.SendPropertyChanging();
					this._AvatarPath = value;
					this.SendPropertyChanged("AvatarPath");
					this.OnAvatarPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyBranch_Employee", Storage="_CompanyBranch", ThisKey="BranchId", OtherKey="Id", IsForeignKey=true)]
		public CompanyBranch CompanyBranch
		{
			get
			{
				return this._CompanyBranch.Entity;
			}
			set
			{
				CompanyBranch previousValue = this._CompanyBranch.Entity;
				if (((previousValue != value) 
							|| (this._CompanyBranch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyBranch.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._CompanyBranch.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._BranchId = value.Id;
					}
					else
					{
						this._BranchId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("CompanyBranch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Employee", Storage="_Company", ThisKey="CompanyId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._CompanyId = value.Id;
					}
					else
					{
						this._CompanyId = default(System.Guid);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Employee", Storage="_Department", ThisKey="DepartmentId", OtherKey="Id", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._DepartmentId = value.Id;
					}
					else
					{
						this._DepartmentId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_Employee", Storage="_Position", ThisKey="PositionId", OtherKey="Id", IsForeignKey=true)]
		public Position Position
		{
			get
			{
				return this._Position.Entity;
			}
			set
			{
				Position previousValue = this._Position.Entity;
				if (((previousValue != value) 
							|| (this._Position.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Position.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Position.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._PositionId = value.Id;
					}
					else
					{
						this._PositionId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Position");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Position")]
	public partial class Position : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _CompanyId;
		
		private string _PositionCode;
		
		private string _PositionName;
		
		private string _Description;
		
		private System.Nullable<bool> _IsManagerLevel;
		
		private bool _IsActive;
		
		private EntitySet<Employee> _Employees;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnCompanyIdChanging(System.Guid value);
    partial void OnCompanyIdChanged();
    partial void OnPositionCodeChanging(string value);
    partial void OnPositionCodeChanged();
    partial void OnPositionNameChanging(string value);
    partial void OnPositionNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsManagerLevelChanging(System.Nullable<bool> value);
    partial void OnIsManagerLevelChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public Position()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PositionCode
		{
			get
			{
				return this._PositionCode;
			}
			set
			{
				if ((this._PositionCode != value))
				{
					this.OnPositionCodeChanging(value);
					this.SendPropertyChanging();
					this._PositionCode = value;
					this.SendPropertyChanged("PositionCode");
					this.OnPositionCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string PositionName
		{
			get
			{
				return this._PositionName;
			}
			set
			{
				if ((this._PositionName != value))
				{
					this.OnPositionNameChanging(value);
					this.SendPropertyChanging();
					this._PositionName = value;
					this.SendPropertyChanged("PositionName");
					this.OnPositionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsManagerLevel", DbType="Bit")]
		public System.Nullable<bool> IsManagerLevel
		{
			get
			{
				return this._IsManagerLevel;
			}
			set
			{
				if ((this._IsManagerLevel != value))
				{
					this.OnIsManagerLevelChanging(value);
					this.SendPropertyChanging();
					this._IsManagerLevel = value;
					this.SendPropertyChanged("IsManagerLevel");
					this.OnIsManagerLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_Employee", Storage="_Employees", ThisKey="Id", OtherKey="PositionId")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Position", Storage="_Company", ThisKey="CompanyId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Positions.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Positions.Add(this);
						this._CompanyId = value.Id;
					}
					else
					{
						this._CompanyId = default(System.Guid);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Position = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Position = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductImage")]
	public partial class ProductImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Nullable<System.Guid> _ProductId;
		
		private System.Nullable<System.Guid> _VariantId;
		
		private string _ImagePath;
		
		private System.Nullable<int> _SortOrder;
		
		private System.Nullable<bool> _IsPrimary;
		
		private System.Data.Linq.Binary _ImageData;
		
		private string _ImageType;
		
		private System.Nullable<long> _ImageSize;
		
		private System.Nullable<int> _ImageWidth;
		
		private System.Nullable<int> _ImageHeight;
		
		private string _Caption;
		
		private string _AltText;
		
		private System.Nullable<bool> _IsActive;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntityRef<ProductService> _ProductService;
		
		private EntityRef<ProductVariant> _ProductVariant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnProductIdChanging(System.Nullable<System.Guid> value);
    partial void OnProductIdChanged();
    partial void OnVariantIdChanging(System.Nullable<System.Guid> value);
    partial void OnVariantIdChanged();
    partial void OnImagePathChanging(string value);
    partial void OnImagePathChanged();
    partial void OnSortOrderChanging(System.Nullable<int> value);
    partial void OnSortOrderChanged();
    partial void OnIsPrimaryChanging(System.Nullable<bool> value);
    partial void OnIsPrimaryChanged();
    partial void OnImageDataChanging(System.Data.Linq.Binary value);
    partial void OnImageDataChanged();
    partial void OnImageTypeChanging(string value);
    partial void OnImageTypeChanged();
    partial void OnImageSizeChanging(System.Nullable<long> value);
    partial void OnImageSizeChanged();
    partial void OnImageWidthChanging(System.Nullable<int> value);
    partial void OnImageWidthChanged();
    partial void OnImageHeightChanging(System.Nullable<int> value);
    partial void OnImageHeightChanged();
    partial void OnCaptionChanging(string value);
    partial void OnCaptionChanged();
    partial void OnAltTextChanging(string value);
    partial void OnAltTextChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public ProductImage()
		{
			this._ProductService = default(EntityRef<ProductService>);
			this._ProductVariant = default(EntityRef<ProductVariant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._ProductService.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VariantId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VariantId
		{
			get
			{
				return this._VariantId;
			}
			set
			{
				if ((this._VariantId != value))
				{
					if (this._ProductVariant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVariantIdChanging(value);
					this.SendPropertyChanging();
					this._VariantId = value;
					this.SendPropertyChanged("VariantId");
					this.OnVariantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string ImagePath
		{
			get
			{
				return this._ImagePath;
			}
			set
			{
				if ((this._ImagePath != value))
				{
					this.OnImagePathChanging(value);
					this.SendPropertyChanging();
					this._ImagePath = value;
					this.SendPropertyChanged("ImagePath");
					this.OnImagePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortOrder", DbType="Int")]
		public System.Nullable<int> SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPrimary", DbType="Bit")]
		public System.Nullable<bool> IsPrimary
		{
			get
			{
				return this._IsPrimary;
			}
			set
			{
				if ((this._IsPrimary != value))
				{
					this.OnIsPrimaryChanging(value);
					this.SendPropertyChanging();
					this._IsPrimary = value;
					this.SendPropertyChanged("IsPrimary");
					this.OnIsPrimaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageData", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ImageData
		{
			get
			{
				return this._ImageData;
			}
			set
			{
				if ((this._ImageData != value))
				{
					this.OnImageDataChanging(value);
					this.SendPropertyChanging();
					this._ImageData = value;
					this.SendPropertyChanged("ImageData");
					this.OnImageDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageType", DbType="NVarChar(10)")]
		public string ImageType
		{
			get
			{
				return this._ImageType;
			}
			set
			{
				if ((this._ImageType != value))
				{
					this.OnImageTypeChanging(value);
					this.SendPropertyChanging();
					this._ImageType = value;
					this.SendPropertyChanged("ImageType");
					this.OnImageTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageSize", DbType="BigInt")]
		public System.Nullable<long> ImageSize
		{
			get
			{
				return this._ImageSize;
			}
			set
			{
				if ((this._ImageSize != value))
				{
					this.OnImageSizeChanging(value);
					this.SendPropertyChanging();
					this._ImageSize = value;
					this.SendPropertyChanged("ImageSize");
					this.OnImageSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageWidth", DbType="Int")]
		public System.Nullable<int> ImageWidth
		{
			get
			{
				return this._ImageWidth;
			}
			set
			{
				if ((this._ImageWidth != value))
				{
					this.OnImageWidthChanging(value);
					this.SendPropertyChanging();
					this._ImageWidth = value;
					this.SendPropertyChanged("ImageWidth");
					this.OnImageWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageHeight", DbType="Int")]
		public System.Nullable<int> ImageHeight
		{
			get
			{
				return this._ImageHeight;
			}
			set
			{
				if ((this._ImageHeight != value))
				{
					this.OnImageHeightChanging(value);
					this.SendPropertyChanging();
					this._ImageHeight = value;
					this.SendPropertyChanged("ImageHeight");
					this.OnImageHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Caption", DbType="NVarChar(255)")]
		public string Caption
		{
			get
			{
				return this._Caption;
			}
			set
			{
				if ((this._Caption != value))
				{
					this.OnCaptionChanging(value);
					this.SendPropertyChanging();
					this._Caption = value;
					this.SendPropertyChanged("Caption");
					this.OnCaptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AltText", DbType="NVarChar(255)")]
		public string AltText
		{
			get
			{
				return this._AltText;
			}
			set
			{
				if ((this._AltText != value))
				{
					this.OnAltTextChanging(value);
					this.SendPropertyChanging();
					this._AltText = value;
					this.SendPropertyChanged("AltText");
					this.OnAltTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductService_ProductImage", Storage="_ProductService", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
		public ProductService ProductService
		{
			get
			{
				return this._ProductService.Entity;
			}
			set
			{
				ProductService previousValue = this._ProductService.Entity;
				if (((previousValue != value) 
							|| (this._ProductService.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductService.Entity = null;
						previousValue.ProductImages.Remove(this);
					}
					this._ProductService.Entity = value;
					if ((value != null))
					{
						value.ProductImages.Add(this);
						this._ProductId = value.Id;
					}
					else
					{
						this._ProductId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ProductService");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductVariant_ProductImage", Storage="_ProductVariant", ThisKey="VariantId", OtherKey="Id", IsForeignKey=true)]
		public ProductVariant ProductVariant
		{
			get
			{
				return this._ProductVariant.Entity;
			}
			set
			{
				ProductVariant previousValue = this._ProductVariant.Entity;
				if (((previousValue != value) 
							|| (this._ProductVariant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductVariant.Entity = null;
						previousValue.ProductImages.Remove(this);
					}
					this._ProductVariant.Entity = value;
					if ((value != null))
					{
						value.ProductImages.Add(this);
						this._VariantId = value.Id;
					}
					else
					{
						this._VariantId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ProductVariant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductService")]
	public partial class ProductService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Code;
		
		private string _Name;
		
		private System.Nullable<System.Guid> _CategoryId;
		
		private bool _IsService;
		
		private string _Description;
		
		private bool _IsActive;
		
		private System.Data.Linq.Binary _ThumbnailImage;
		
		private EntitySet<ProductImage> _ProductImages;
		
		private EntitySet<ProductVariant> _ProductVariants;
		
		private EntityRef<ProductServiceCategory> _ProductServiceCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCategoryIdChanging(System.Nullable<System.Guid> value);
    partial void OnCategoryIdChanged();
    partial void OnIsServiceChanging(bool value);
    partial void OnIsServiceChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnThumbnailImageChanging(System.Data.Linq.Binary value);
    partial void OnThumbnailImageChanged();
    #endregion
		
		public ProductService()
		{
			this._ProductImages = new EntitySet<ProductImage>(new Action<ProductImage>(this.attach_ProductImages), new Action<ProductImage>(this.detach_ProductImages));
			this._ProductVariants = new EntitySet<ProductVariant>(new Action<ProductVariant>(this.attach_ProductVariants), new Action<ProductVariant>(this.detach_ProductVariants));
			this._ProductServiceCategory = default(EntityRef<ProductServiceCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._ProductServiceCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsService", DbType="Bit NOT NULL")]
		public bool IsService
		{
			get
			{
				return this._IsService;
			}
			set
			{
				if ((this._IsService != value))
				{
					this.OnIsServiceChanging(value);
					this.SendPropertyChanging();
					this._IsService = value;
					this.SendPropertyChanged("IsService");
					this.OnIsServiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThumbnailImage", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ThumbnailImage
		{
			get
			{
				return this._ThumbnailImage;
			}
			set
			{
				if ((this._ThumbnailImage != value))
				{
					this.OnThumbnailImageChanging(value);
					this.SendPropertyChanging();
					this._ThumbnailImage = value;
					this.SendPropertyChanged("ThumbnailImage");
					this.OnThumbnailImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductService_ProductImage", Storage="_ProductImages", ThisKey="Id", OtherKey="ProductId")]
		public EntitySet<ProductImage> ProductImages
		{
			get
			{
				return this._ProductImages;
			}
			set
			{
				this._ProductImages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductService_ProductVariant", Storage="_ProductVariants", ThisKey="Id", OtherKey="ProductId")]
		public EntitySet<ProductVariant> ProductVariants
		{
			get
			{
				return this._ProductVariants;
			}
			set
			{
				this._ProductVariants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductServiceCategory_ProductService", Storage="_ProductServiceCategory", ThisKey="CategoryId", OtherKey="Id", IsForeignKey=true)]
		public ProductServiceCategory ProductServiceCategory
		{
			get
			{
				return this._ProductServiceCategory.Entity;
			}
			set
			{
				ProductServiceCategory previousValue = this._ProductServiceCategory.Entity;
				if (((previousValue != value) 
							|| (this._ProductServiceCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductServiceCategory.Entity = null;
						previousValue.ProductServices.Remove(this);
					}
					this._ProductServiceCategory.Entity = value;
					if ((value != null))
					{
						value.ProductServices.Add(this);
						this._CategoryId = value.Id;
					}
					else
					{
						this._CategoryId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ProductServiceCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductImages(ProductImage entity)
		{
			this.SendPropertyChanging();
			entity.ProductService = this;
		}
		
		private void detach_ProductImages(ProductImage entity)
		{
			this.SendPropertyChanging();
			entity.ProductService = null;
		}
		
		private void attach_ProductVariants(ProductVariant entity)
		{
			this.SendPropertyChanging();
			entity.ProductService = this;
		}
		
		private void detach_ProductVariants(ProductVariant entity)
		{
			this.SendPropertyChanging();
			entity.ProductService = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductServiceCategory")]
	public partial class ProductServiceCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _CategoryName;
		
		private string _Description;
		
		private System.Nullable<System.Guid> _ParentId;
		
		private string _CategoryCode;
		
		private EntitySet<ProductService> _ProductServices;
		
		private EntitySet<ProductServiceCategory> _ProductServiceCategories;
		
		private EntityRef<ProductServiceCategory> _ProductServiceCategory1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnParentIdChanging(System.Nullable<System.Guid> value);
    partial void OnParentIdChanged();
    partial void OnCategoryCodeChanging(string value);
    partial void OnCategoryCodeChanged();
    #endregion
		
		public ProductServiceCategory()
		{
			this._ProductServices = new EntitySet<ProductService>(new Action<ProductService>(this.attach_ProductServices), new Action<ProductService>(this.detach_ProductServices));
			this._ProductServiceCategories = new EntitySet<ProductServiceCategory>(new Action<ProductServiceCategory>(this.attach_ProductServiceCategories), new Action<ProductServiceCategory>(this.detach_ProductServiceCategories));
			this._ProductServiceCategory1 = default(EntityRef<ProductServiceCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					if (this._ProductServiceCategory1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryCode", DbType="NVarChar(50)")]
		public string CategoryCode
		{
			get
			{
				return this._CategoryCode;
			}
			set
			{
				if ((this._CategoryCode != value))
				{
					this.OnCategoryCodeChanging(value);
					this.SendPropertyChanging();
					this._CategoryCode = value;
					this.SendPropertyChanged("CategoryCode");
					this.OnCategoryCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductServiceCategory_ProductService", Storage="_ProductServices", ThisKey="Id", OtherKey="CategoryId")]
		public EntitySet<ProductService> ProductServices
		{
			get
			{
				return this._ProductServices;
			}
			set
			{
				this._ProductServices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductServiceCategory_ProductServiceCategory", Storage="_ProductServiceCategories", ThisKey="Id", OtherKey="ParentId")]
		public EntitySet<ProductServiceCategory> ProductServiceCategories
		{
			get
			{
				return this._ProductServiceCategories;
			}
			set
			{
				this._ProductServiceCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductServiceCategory_ProductServiceCategory", Storage="_ProductServiceCategory1", ThisKey="ParentId", OtherKey="Id", IsForeignKey=true)]
		public ProductServiceCategory ProductServiceCategory1
		{
			get
			{
				return this._ProductServiceCategory1.Entity;
			}
			set
			{
				ProductServiceCategory previousValue = this._ProductServiceCategory1.Entity;
				if (((previousValue != value) 
							|| (this._ProductServiceCategory1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductServiceCategory1.Entity = null;
						previousValue.ProductServiceCategories.Remove(this);
					}
					this._ProductServiceCategory1.Entity = value;
					if ((value != null))
					{
						value.ProductServiceCategories.Add(this);
						this._ParentId = value.Id;
					}
					else
					{
						this._ParentId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ProductServiceCategory1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductServices(ProductService entity)
		{
			this.SendPropertyChanging();
			entity.ProductServiceCategory = this;
		}
		
		private void detach_ProductServices(ProductService entity)
		{
			this.SendPropertyChanging();
			entity.ProductServiceCategory = null;
		}
		
		private void attach_ProductServiceCategories(ProductServiceCategory entity)
		{
			this.SendPropertyChanging();
			entity.ProductServiceCategory1 = this;
		}
		
		private void detach_ProductServiceCategories(ProductServiceCategory entity)
		{
			this.SendPropertyChanging();
			entity.ProductServiceCategory1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductVariant")]
	public partial class ProductVariant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _ProductId;
		
		private string _VariantCode;
		
		private System.Guid _UnitId;
		
		private bool _IsActive;
		
		private System.Data.Linq.Binary _ThumbnailImage;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _ModifiedDate;
		
		private string _VariantFullName;
		
		private EntitySet<VariantAttribute> _VariantAttributes;
		
		private EntitySet<ProductImage> _ProductImages;
		
		private EntityRef<ProductService> _ProductService;
		
		private EntityRef<UnitOfMeasure> _UnitOfMeasure;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnProductIdChanging(System.Guid value);
    partial void OnProductIdChanged();
    partial void OnVariantCodeChanging(string value);
    partial void OnVariantCodeChanged();
    partial void OnUnitIdChanging(System.Guid value);
    partial void OnUnitIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnThumbnailImageChanging(System.Data.Linq.Binary value);
    partial void OnThumbnailImageChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnVariantFullNameChanging(string value);
    partial void OnVariantFullNameChanged();
    #endregion
		
		public ProductVariant()
		{
			this._VariantAttributes = new EntitySet<VariantAttribute>(new Action<VariantAttribute>(this.attach_VariantAttributes), new Action<VariantAttribute>(this.detach_VariantAttributes));
			this._ProductImages = new EntitySet<ProductImage>(new Action<ProductImage>(this.attach_ProductImages), new Action<ProductImage>(this.detach_ProductImages));
			this._ProductService = default(EntityRef<ProductService>);
			this._UnitOfMeasure = default(EntityRef<UnitOfMeasure>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._ProductService.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VariantCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string VariantCode
		{
			get
			{
				return this._VariantCode;
			}
			set
			{
				if ((this._VariantCode != value))
				{
					this.OnVariantCodeChanging(value);
					this.SendPropertyChanging();
					this._VariantCode = value;
					this.SendPropertyChanged("VariantCode");
					this.OnVariantCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UnitId
		{
			get
			{
				return this._UnitId;
			}
			set
			{
				if ((this._UnitId != value))
				{
					if (this._UnitOfMeasure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitIdChanging(value);
					this.SendPropertyChanging();
					this._UnitId = value;
					this.SendPropertyChanged("UnitId");
					this.OnUnitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThumbnailImage", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ThumbnailImage
		{
			get
			{
				return this._ThumbnailImage;
			}
			set
			{
				if ((this._ThumbnailImage != value))
				{
					this.OnThumbnailImageChanging(value);
					this.SendPropertyChanging();
					this._ThumbnailImage = value;
					this.SendPropertyChanged("ThumbnailImage");
					this.OnThumbnailImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VariantFullName", DbType="NVarChar(500)")]
		public string VariantFullName
		{
			get
			{
				return this._VariantFullName;
			}
			set
			{
				if ((this._VariantFullName != value))
				{
					this.OnVariantFullNameChanging(value);
					this.SendPropertyChanging();
					this._VariantFullName = value;
					this.SendPropertyChanged("VariantFullName");
					this.OnVariantFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductVariant_VariantAttribute", Storage="_VariantAttributes", ThisKey="Id", OtherKey="VariantId")]
		public EntitySet<VariantAttribute> VariantAttributes
		{
			get
			{
				return this._VariantAttributes;
			}
			set
			{
				this._VariantAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductVariant_ProductImage", Storage="_ProductImages", ThisKey="Id", OtherKey="VariantId")]
		public EntitySet<ProductImage> ProductImages
		{
			get
			{
				return this._ProductImages;
			}
			set
			{
				this._ProductImages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductService_ProductVariant", Storage="_ProductService", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
		public ProductService ProductService
		{
			get
			{
				return this._ProductService.Entity;
			}
			set
			{
				ProductService previousValue = this._ProductService.Entity;
				if (((previousValue != value) 
							|| (this._ProductService.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductService.Entity = null;
						previousValue.ProductVariants.Remove(this);
					}
					this._ProductService.Entity = value;
					if ((value != null))
					{
						value.ProductVariants.Add(this);
						this._ProductId = value.Id;
					}
					else
					{
						this._ProductId = default(System.Guid);
					}
					this.SendPropertyChanged("ProductService");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitOfMeasure_ProductVariant", Storage="_UnitOfMeasure", ThisKey="UnitId", OtherKey="Id", IsForeignKey=true)]
		public UnitOfMeasure UnitOfMeasure
		{
			get
			{
				return this._UnitOfMeasure.Entity;
			}
			set
			{
				UnitOfMeasure previousValue = this._UnitOfMeasure.Entity;
				if (((previousValue != value) 
							|| (this._UnitOfMeasure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitOfMeasure.Entity = null;
						previousValue.ProductVariants.Remove(this);
					}
					this._UnitOfMeasure.Entity = value;
					if ((value != null))
					{
						value.ProductVariants.Add(this);
						this._UnitId = value.Id;
					}
					else
					{
						this._UnitId = default(System.Guid);
					}
					this.SendPropertyChanged("UnitOfMeasure");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VariantAttributes(VariantAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ProductVariant = this;
		}
		
		private void detach_VariantAttributes(VariantAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ProductVariant = null;
		}
		
		private void attach_ProductImages(ProductImage entity)
		{
			this.SendPropertyChanging();
			entity.ProductVariant = this;
		}
		
		private void detach_ProductImages(ProductImage entity)
		{
			this.SendPropertyChanging();
			entity.ProductVariant = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UnitOfMeasure")]
	public partial class UnitOfMeasure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Code;
		
		private string _Name;
		
		private string _Description;
		
		private bool _IsActive;
		
		private EntitySet<ProductVariant> _ProductVariants;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public UnitOfMeasure()
		{
			this._ProductVariants = new EntitySet<ProductVariant>(new Action<ProductVariant>(this.attach_ProductVariants), new Action<ProductVariant>(this.detach_ProductVariants));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitOfMeasure_ProductVariant", Storage="_ProductVariants", ThisKey="Id", OtherKey="UnitId")]
		public EntitySet<ProductVariant> ProductVariants
		{
			get
			{
				return this._ProductVariants;
			}
			set
			{
				this._ProductVariants.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductVariants(ProductVariant entity)
		{
			this.SendPropertyChanging();
			entity.UnitOfMeasure = this;
		}
		
		private void detach_ProductVariants(ProductVariant entity)
		{
			this.SendPropertyChanging();
			entity.UnitOfMeasure = null;
		}
	}
}
#pragma warning restore 1591
